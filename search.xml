<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2.MySQL简介</title>
    <url>/2019/03/19/%E7%AC%AC10%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>MySQL是一种关系数据库管理系统，它可以将数据保存在不同的表中，提高了速度和灵活性。</strong><br>MySQL是开源的，目前属于Oracle公司。你可以使用MySQL来部署云原生应用程序，或者将其嵌入到其他软件产品中。</p>
<blockquote>
<p><strong>优点：</strong></p>
<ul>
<li><strong>成本免费–开源软件</strong></li>
<li><strong>性能–执行很快</strong></li>
<li><strong>可信赖–多个公司使用，用来处理重要数据</strong></li>
<li><strong>简单–方便安装和使用</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>3.使用MySQL</title>
    <url>/2019/03/19/%E7%AC%AC11%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>为了连接到MySQL,需要以下信息：</p>
<ul>
<li>主机名（计算机名）–如果链接到本地MySQL服务器，为localhost;</li>
<li>端口（如果使用默认端口3306之外的端口）；</li>
<li>一个合法的用户名；</li>
<li>用户口令（如果需要）<h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2>在你最初连接到MySQL时，没有任何数据库打开供你使用。在你能执行任意数据库操作前，需要选择一个数据库。为此，可使用<strong>USE</strong>关键字。<br>:::danger<br>关键字(key word) 作为MySQL语言组成部分的一个保留字。决不要用关键字命名一个表或列。附录E列出了MySQL的关键字。<br>:::</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">	USE 数据库名;</span><br><span class="line">输出：</span><br><span class="line">	Database changed</span><br><span class="line">分析：</span><br><span class="line">	USE语句并不返回任何结果。依赖于使用的客户机，显示某种形式的通知。例如，这里显示出的Database changed消息是mysql命令行实用程序在数据库选择成功后显示的。</span><br></pre></td></tr></table></figure>

<h2 id="了解数据库和表"><a href="#了解数据库和表" class="headerlink" title="了解数据库和表"></a>了解数据库和表</h2><p>如果你不知道可以使用的数据库名时怎么办？这时，MySQL Administrator和MySQL Query Browser怎样能显示可用的数据库列表？<br>数据库、表、列、用户、权限等的信息被存储在数据库和表中（MySQL使用MySQL来存储这些信息）。不过，内部的表一般不直接访问。可用MySQL的SHOW命令来显示这些信息（MySQL从内部表中提取这些信息）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">	<span class="keyword">SHOW</span> DATABASES;</span><br><span class="line">输出：</span><br><span class="line">	可用数据库的一个列表。包含再这个列表中的可能是MySQL内部使用的数据库。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">	<span class="keyword">SHOW</span> TABLES;</span><br><span class="line">输出：</span><br><span class="line">	返回当前选择的数据库内可用表的列表。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>DESCRIBE语句 MySQL支持用DESCRIBE作为SHOW COLUMNS FROM的一种快捷方式。换句话说，DESCRIBE customers；是SHOW COLUMNS FROM customers；的一种快捷方式。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> STATUS，显示广泛的服务器状态信息；</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DARABASE 和<span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span>.分别用来显示创建特定数据库或表的MySQL语句；</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS,用来显示授予用户的安全权限</span><br><span class="line"><span class="keyword">SHOW</span> ERRORS和<span class="keyword">SHOW</span> WARNINGS用来显示服务器错误或警告信息</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>4.检索数据</title>
    <url>/2019/03/19/%E7%AC%AC12%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h2><p>:::info<br>SELECT语句是一种SQL语句，用于从数据库中选取数据。<br>你可以使用SELECT语句来指定要查询的列名、表名、筛选条件、分组和排序等。<br>:::</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名</span><br><span class="line">查询这张表所有内容。</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名</span><br><span class="line">查询这张表某一列所有内容。</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> 列名<span class="number">1</span>，列名<span class="number">2</span>…<span class="keyword">from</span> 表名</span><br><span class="line">查询这张表的列<span class="number">1</span>，列<span class="number">2</span>，等多列。</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 列名 <span class="keyword">from</span> 表名</span><br><span class="line">查询这一列去掉重复内容后的内容。</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> 表达式 <span class="keyword">from</span> 表名</span><br><span class="line">查询表达式</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> 列名（表达式）<span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名</span><br><span class="line">给某一列或表达式取别名。</span><br></pre></td></tr></table></figure>

<p><strong>常见的SELECT语句使用规范有：</strong></p>
<ul>
<li>SELECT语句选择的字段按照每行1个字段的方式编排。</li>
<li>首个选择的字段与SELECT之间隔1个缩进量。</li>
<li>换行缩进2个缩进量后，添加逗号再输入其它字段名。</li>
<li>SELECT语句中尽量避免使用*，而应该明确指定要查询的列名。</li>
<li>SELECT语句中尽量避免使用DISTINCT，而应该通过WHERE子句进行筛选。</li>
<li>SELECT语句中尽量避免使用子查询，而应该使用JOIN子句连接多个表。</li>
<li>SELECT语句中尽量避免使用函数或表达式，而应该在源数据上进行处理。</li>
<li>SELECT语句中尽量避免使用ORDER BY子句，而应该在客户端进行排序。</li>
</ul>
<p><strong>SELECT语句是一种常用的SQL语句，但在使用它时也要注意一些事项：</strong></p>
<ul>
<li>在参数或查询中指定日期时间值时，要以字符串形式提供这些值。</li>
<li>在SELECT查询的TOP子句中，不能使用特殊字符”#“、”^“、”&amp;“和”%”。</li>
<li>在表的架构中返回的列名作为所有大写字符返回。</li>
<li>在SELECT查询的LIKE子句中，只有百分号”%” (对于零个或多个字符) 和下划线”_” (对于任何单个字符) 是允许的特殊字符。</li>
<li>SELECT查询中不能使用可能超过255个字符的数据类型的值，例如STRING、RAWSTRING、LRAW、VARC和LCHAR。</li>
<li>SELECT语句支持的最大列数或字段数为1000。</li>
<li>WHERE子句中支持的最大谓词数为100。<h2 id="检索多个列"><a href="#检索多个列" class="headerlink" title="检索多个列"></a>检索多个列</h2>:::info<br>要想从一个表中检索多个列，使用相同的SELECT语句。唯一的不同是必须在SELECT关键字后给出多个列名，列名之间必须以逗号分隔。<br>:::<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名<span class="number">1</span>，列名<span class="number">2</span>…<span class="keyword">from</span> 表名</span><br><span class="line">查询这张表的列<span class="number">1</span>，列<span class="number">2</span>，等多列。</span><br></pre></td></tr></table></figure>
<h2 id="检索不同的行（DISTINCT）"><a href="#检索不同的行（DISTINCT）" class="headerlink" title="检索不同的行（DISTINCT）"></a>检索不同的行（DISTINCT）</h2>DISTINCT关键字的作用是用于返回唯一不同的值。在表中，可能会包含重复值，有时我们只想列出不同的值。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 列名, <span class="keyword">FROM</span> 表名；</span><br><span class="line">查询此列内容下行内的不同内容</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="限制查询结果（LIMIT）"><a href="#限制查询结果（LIMIT）" class="headerlink" title="限制查询结果（LIMIT）"></a>限制查询结果（LIMIT）</h2>:::info<br>LIMIT子句的作用是用于强制SELECT语句返回指定的记录数。LIMIT子句可以接受一个或两个参数，参数必须是整数常量。如果给定两个参数，第一个指定返回记录行的偏移量，第二个指定返回记录行的最大数目。<br>:::</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">例如，如果我们想查询表中前<span class="number">10</span>条记录，可以使用如下语句：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons LIMIT <span class="number">10</span>;</span><br><span class="line">如果我们想查询表中从第<span class="number">11</span>条开始的<span class="number">10</span>条记录，可以使用如下语句：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons LIMIT <span class="number">10</span> <span class="keyword">OFFSET</span> <span class="number">10</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons LIMIT <span class="number">10</span>, <span class="number">10</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注意，在使用LIMIT子句时，使用ORDER BY子句确保返回的行按指定顺序非常重要5。并非所有数据库系统都支持LIMIT子句，因此，LIMIT子句仅在某些数据库系统中可用，例如MySQL，PostgreSQL，SQLite等。</strong></p>
<h2 id="使用完全限定的表名"><a href="#使用完全限定的表名" class="headerlink" title="使用完全限定的表名"></a>使用完全限定的表名</h2><p>完全限定的表名是指在表名之前加上数据库名来表示这个表是属于哪个数据库的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 表名.列名 <span class="keyword">FROM</span> 数据库名.表名;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>5.排序数据</title>
    <url>/2019/03/19/%E7%AC%AC13%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>:::info<br>**ORDER BY **子句是SQL语言中的一个关键字，它用于对查询结果按照一个或多个字段进行排序，可以是升序（ASC）或降序（DESC）。<br>:::</p>
<p><strong>ORDER BY 子句的排序规则如下：</strong></p>
<ul>
<li>您可以在 ORDER BY 子句中指定一个或多个用于排序的字段，它们之间以逗号分隔。</li>
<li>您可以在每个字段后面加上 ASC 或 DESC 关键字来指定升序或降序。如果不写，默认为 ASC。</li>
<li>记录首先按 ORDER BY 之后第一个字段进行排序，然后按第二个字段对排序列表进行排序，依此类推。</li>
<li>ORDER BY 子句中引用的列名必须明确对应于选择列表中的列或列别名，或对应于 FROM 子句中指定的表中定义的列。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名；</span><br><span class="line">用来对列以排序，不写默认升序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">DESC</span>；</span><br><span class="line">对列进行倒序排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">DESC</span> LIMIT <span class="number">1</span>；</span><br><span class="line">对列进行倒序排序，保留最大值</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>6.数据过滤</title>
    <url>/2019/03/25/%E7%AC%AC14%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>SQL中过滤数据的常用方法有以下几种：- 使用 WHERE 子句按照条件表达式筛选数据，例如 SELECT * FROM employees WHERE salary &gt; 12000;</p>
<ul>
<li>使用逻辑表达式（AND，OR，NOT）组合多个条件，例如 SELECT last_name FROM employees WHERE last_name LIKE ‘%a%’ OR last_name LIKE ‘%e%’;</li>
<li>使用模糊查询（LIKE，BETWEEN，IN）匹配不精确的值，例如 SELECT * FROM products WHERE price BETWEEN 10 AND 20;</li>
<li>使用数据过滤器（filter()）方法在应用层对数据进行过滤，例如 filter(lambda x: x &gt; 10, [1,2,3,11,12]);</li>
</ul>
<h2 id="WHERE子句"><a href="#WHERE子句" class="headerlink" title="WHERE子句"></a>WHERE子句</h2><p>:::info<br>WHERE子句的作用是用于过滤记录，提取那些满足指定条件的记录。<br>可以在 WHERE 子句中指定任何条件，并使用逻辑运算符（AND，OR，NOT）组合多个条件。<br>WHERE子句可以应用于 SELECT，DELETE 或者 UPDATE 命令<br>:::</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>，列名<span class="number">2</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列名<span class="number">1</span> <span class="operator">=</span> 值；</span><br><span class="line">查询此列<span class="number">1</span>中值得行</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="WHERE子句操作符"><a href="#WHERE子句操作符" class="headerlink" title="WHERE子句操作符"></a>WHERE子句操作符</h2><table>
<thead>
<tr>
<th><strong>操作符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>BETWEN</td>
<td>在指定得两个值中间</td>
</tr>
</tbody></table>
<h2 id="空值检查"><a href="#空值检查" class="headerlink" title="空值检查"></a>空值检查</h2><p>:::info<br>在创建表时，表设计人员可以指定其中的列是否可以不包含值。在一个列不包含值时，称其为包含空值NULL。<br>:::</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列名<span class="number">2</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line">返回列名<span class="number">2</span>为空得字段得所有数据</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>7.过滤数据</title>
    <url>/2019/04/02/%E7%AC%AC15%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h1><blockquote>
<p><strong>SQL逻辑操作符是用来测试条件的真值的。SQL逻辑操作符有以下几种：</strong></p>
<ul>
<li>ALL：如果子查询的所有值都满足条件，返回TRUE。</li>
<li>AND：如果所有用AND分隔的条件都为TRUE，返回TRUE。</li>
<li>ANY：如果子查询的任何一个值满足条件，返回TRUE。</li>
<li>BETWEEN：如果值在给定的范围内，返回TRUE。</li>
<li>EXISTS：如果子查询有结果集，返回TRUE。</li>
<li>IN：如果值在给定的列表中，返回TRUE。</li>
<li>LIKE：如果值匹配给定的模式，返回TRUE。</li>
<li>NOT：对逻辑表达式取反，返回相反的结果。</li>
<li>OR：如果任何一个用OR分隔的条件为TRUE，返回TRUE。</li>
<li>SOME：和ANY一样，如果子查询的任何一个值满足条件，返回TRUE。</li>
</ul>
</blockquote>
<h2 id="AND操作符"><a href="#AND操作符" class="headerlink" title="AND操作符"></a>AND操作符</h2><p>:::info<br>SQL中AND操作符是用来在WHERE子句中组合多个条件的。<br>如果所有用AND分隔的条件都为TRUE，那么查询结果就会显示符合这些条件的记录。<br>:::</p>
<h2 id="OR操作符"><a href="#OR操作符" class="headerlink" title="OR操作符"></a>OR操作符</h2><p>:::info<br>OR：如果任何一个用OR分隔的条件为TRUE，返回TRUE。<br>:::</p>
<blockquote>
<p>MySQL中逻辑操作符的执行顺序和Microsoft SQL Server中的一样，也是：</p>
<ul>
<li><strong>NOT优先级最高，从右向左结合。</strong></li>
<li><strong>AND优先级次之，从左向右结合。</strong></li>
<li><strong>OR优先级最低，从左向右结合。</strong></li>
</ul>
</blockquote>
<p>不过，MySQL中逻辑操作符的返回值和Microsoft SQL Server中的不同。</p>
<blockquote>
<p>在MySQL中，逻辑操作符返回1（TRUE），0（FALSE）或NULL（UNKNOWN），而不是布尔值。</p>
</blockquote>
<p>例如，在MySQL中，你可以使用以下SQL语句来选择居住在”Germany”或者”London”并且姓氏以”A”开头的客户：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers <span class="keyword">WHERE</span> (Country <span class="operator">=</span> <span class="string">&#x27;Germany&#x27;</span> <span class="keyword">OR</span> Country <span class="operator">=</span> <span class="string">&#x27;London&#x27;</span>) <span class="keyword">AND</span> CustomerName <span class="keyword">LIKE</span> <span class="string">&#x27;A%&#x27;</span>; </span><br></pre></td></tr></table></figure>

<p>这个SQL语句会返回满足条件的记录，并且每个记录都有一个隐含的1作为逻辑表达式的结果。<br>如果没有满足条件的记录，那么SQL语句会返回空集，并且没有隐含的0作为逻辑表达式的结果。<br>如果有任何字段为NULL，那么SQL语句会返回NULL作为逻辑表达式的结果。</p>
<h2 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h2><p>:::info<br>IN：如果值在给定的列表中，返回TRUE。<br>:::</p>
<h2 id="NOT操作符"><a href="#NOT操作符" class="headerlink" title="NOT操作符"></a>NOT操作符</h2><p>:::info<br>NOT：对逻辑表达式取反，返回相反的结果。<br>:::</p>
<h2 id="LIKE操作符"><a href="#LIKE操作符" class="headerlink" title="LIKE操作符"></a>LIKE操作符</h2><p>:::info<br>LIKE：如果值匹配给定的模式，返回TRUE。<br>:::</p>
<blockquote>
<p><strong>MySQL中LIKE操作符是用来在WHERE子句中搜索一个指定的模式的。</strong><br><strong>你可以使用两个通配符来构造模式：</strong><br><strong>百分号（%）和下划线（_）。</strong><br><strong>百分号表示零个，一个或多个字符，下划线表示一个单一的字符。</strong></p>
</blockquote>
<p>例如，在MySQL中，你可以使用以下SQL语句来选择姓氏以”A”开头并且有三个字母的客户：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> CustomerName <span class="keyword">LIKE</span> <span class="string">&#x27;A__&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这个SQL语句会返回满足条件的记录，并且每个记录都有一个隐含的1作为逻辑表达式的结果。如果没有满足条件的记录，那么SQL语句会返回空集，并且没有隐含的0作为逻辑表达式的结果。如果有任何字段为NULL，那么SQL语句会返回NULL作为逻辑表达式的结果。</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>8.正则表达式搜索</title>
    <url>/2019/04/02/%E7%AC%AC16%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>:::info<br>MySQL中正则表达式是一种用于文本匹配的工具，可以用regexp操作符来进行正则表达式匹配。MySQL的正则表达式语法与PHP或Perl类似，可以使用一些特殊字符来表示不同的规则。<br>:::</p>
<blockquote>
<p><strong>MySQL中正则表达式常用的特殊字符有以下几种：</strong><br><strong>.</strong> 匹配任意单个字符<br><strong>[]</strong> 匹配方括号内的任意字符<br><strong>[^]</strong> 匹配方括号外的任意字符<br>***** 匹配前面的字符零次或多次<br><strong>+</strong> 匹配前面的字符一次或多次<br><strong>?</strong> 匹配前面的字符零次或一次<br><strong>{n}</strong> 匹配前面的字符恰好n次<br><strong>{n,m}</strong> 匹配前面的字符至少n次，至多m次<br><strong>|</strong> 匹配两个选项中的一个<br><strong>^</strong> 匹配字符串开头<br><strong>$</strong> 匹配字符串结尾</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>9.计算字段</title>
    <url>/2019/04/03/%E7%AC%AC17%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p><strong>MySQL计算字段是指在查询时根据其他字段的值或表达式计算得到的字段。</strong><br><strong>它们可以用来转换、格式化或组合数据，以满足应用程序的需求。</strong></p>
<p><strong>MySQL支持两种类型的计算字段：虚拟列和存储列。</strong><br><strong>虚拟列是在每次查询时动态计算的，而存储列是在插入或更新时计算并保存在表中的。</strong></p>
</blockquote>
<p>:::info<br>MySQL中计算字段是指在查询时使用表达式或函数对数据进行运算的字段。<br>例如，您可以使用+运算符来计算两个列的和，或者使用CONCAT函数来连接两个字符串。<br>:::</p>
<p><code>字段（field） 基本上与列（column）的意思相同，经常互换使用，不过数据库列一般称为列，而术语字段通常用在计算字段的连接上。</code></p>
<h2 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h2><p>:::info<br><strong>拼接（concatenate） 将值联结到一起构成单个值。</strong><br>解决办法是把两个列拼接起来。在MySQL的SELECT语句中，可使用Concat()函数来拼接两个列。<br>:::</p>
<blockquote>
<p>MySQL的不同之处 多数DBMS使用+或||来实现拼接，MySQL则使用Concat()函数来实现。当把SQL语句转换成MySQL语句时一定要把这个区别铭记在心。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(列名<span class="number">1</span>，列名<span class="number">2</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">显示结果为列名<span class="number">1</span><span class="operator">+</span>列名<span class="number">2</span>内行的拼接</span><br></pre></td></tr></table></figure>
<h2 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h2><p>:::info<br><strong>别名（alias）</strong>是一个字段或值的替换名。别名用AS关键字赋予<br>:::</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(列名<span class="number">1</span>，列名<span class="number">2</span>) <span class="keyword">AS</span> 列名<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">显示结果中列名为别名列名<span class="number">3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>**别名的其他用途 **别名还有其他用途。常见的用途包括在实际的表列名包含不符合规定的字符（如空格）时重新命名它，在原来的名字含混或容易误解时扩充它，等等。<br>**导出列 **别名有时也称为导出列（derived column），不管称为什么，它们所代表的都是相同的东西。</p>
</blockquote>
<h2 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h2><blockquote>
<p>/ * + -</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>10.使用数据处理函数</title>
    <url>/2019/04/04/%E7%AC%AC18%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>:::info<br>MySQL中函数是指对数据进行处理并返回一个值的程序。<br>MySQL有很多内置的函数，例如字符串函数、数值函数、日期和时间函数、聚合函数。<br>:::</p>
<blockquote>
<p>函数没有SQL的可移植性强 能运行在多个系统上的代码称为可移植的（portable）。<br>相对来说，多数SQL语句是可移植的，在SQL实现之间有差异时，这些差异通常不那么难处理。而函数的可移植性却不强。<br>几乎每种主要的DBMS的实现都支持其他实现不支持的函数，而且有时差异还很大。为了代码的可移植，许多SQL程序员不赞成使用特殊实现的功能。虽然这样做很有好处，但不总是利于应用程序的性能。<br>如果不使用这些函数，编写某些应用程序代码会很艰难。必须利用其他方法来实现DBMS非常有效地完成的工作。<br>如果你决定使用函数，应该保证做好代码注释，以便以后你（或其他人）能确切地知道所编写SQL代码的含义。</p>
</blockquote>
<h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><blockquote>
<p><strong>大多数SQL实现支持以下类型的函数：</strong></p>
<ul>
<li> 用于处理文本串（如删除或填充值，转换值为大写或小写）的文本函数。</li>
<li> 用于在数值数据上进行算术操作（如返回绝对值，进行代数运算）的数值函数。</li>
<li> 用于处理日期和时间值并从这些值中提取特定成分（例如，返回两个日期之差，检查日期有效性等）的日期和时间函数。</li>
<li> 返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。</li>
</ul>
</blockquote>
<h2 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h2><table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Left()</td>
<td>返回左边的字符</td>
</tr>
<tr>
<td>Length()</td>
<td>返回串的长度</td>
</tr>
<tr>
<td>Locate()</td>
<td>找出串的一个子串</td>
</tr>
<tr>
<td>Lower()</td>
<td>将串转换为小写</td>
</tr>
<tr>
<td>LTrim()</td>
<td>去掉串左边的空格</td>
</tr>
<tr>
<td>Right()</td>
<td>返回串右边的字符</td>
</tr>
<tr>
<td>RTrim()</td>
<td>去掉串右边的空格</td>
</tr>
<tr>
<td>Soundex()</td>
<td>返回串的SOUNDEX值</td>
</tr>
<tr>
<td>SubString()</td>
<td>返回子串的字符</td>
</tr>
<tr>
<td>Upper()</td>
<td>将串转换为大写</td>
</tr>
</tbody></table>
<h2 id="日期与时间处理函数"><a href="#日期与时间处理函数" class="headerlink" title="日期与时间处理函数"></a>日期与时间处理函数</h2><blockquote>
<p><strong>MySQL中有许多日期和时间处理函数，可以用来提取、转换、比较或计算日期和时间值。</strong><br>一些常用的函数有：</p>
<ul>
<li>DATE()：从日期或DateTime值中提取日期部分。</li>
<li>TIME()：从时间或DateTime值中提取时间部分。</li>
<li>CURDATE()：返回当前日期。</li>
<li>CURTIME()：返回当前时间。</li>
<li>NOW()：返回当前的日期和时间。</li>
<li>DATE_ADD()：给一个日期或DateTime值加上一个间隔值。</li>
<li>DATE_SUB()：给一个日期或DateTime值减去一个间隔值。</li>
<li>DATEDIFF()：计算两个日期之间的天数差异。</li>
<li>TIMESTAMPDIFF()：计算两个日期或DateTime之间的指定单位的差异。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>11.汇总函数</title>
    <url>/2019/04/04/%E7%AC%AC19%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><blockquote>
<p><strong>MySQL中的聚集函数是用来对多个值进行计算，并返回一个单一值，比如所有值的平均值、总和、最大值和最小值等。</strong><br>一些常用的聚集函数有：</p>
<ul>
<li>AVG()：返回一组值的平均值。</li>
<li>SUM()：返回一组值的总和。</li>
<li>COUNT()：返回一组值的个数。</li>
<li>MIN()：返回一组值中的最小值。</li>
<li>MAX()：返回一组值中的最大值。</li>
</ul>
</blockquote>
<p>我们通常在SELECT语句中使用聚集函数，可以结合GROUP BY或HAVING子句来对数据进行分组或筛选。</p>
<p>:::info<br>**NULL值 **AVG()函数忽略列值为NULL的行。<br>**NULL值 *<em>如果指定列名，则指定列的值为空的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号（</em>），则不忽略。<br><strong>NULL值</strong> MAX()函数忽略列值为NULL的行。<br><strong>NULL值</strong> MIN()函数忽略列值为NULL的行。<br>**NULL值 **SUM()函数忽略列值为NULL的行。<br>:::<br>:::info<br>**只用于单个列 **AVG()只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使用多个AVG()函数。<br><strong>在多个列上进行计算</strong> 如本例所示，利用标准的算术操作符，所有聚集函数都可用来执行多个列上的计算。<br>:::<br>:::info<br>**对非数值数据使用MAX() **虽然MAX()一般用来找出最大的数值或日期值，但MySQL允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，如果数据按相应的列排序，则MAX()返回最后一行。<br>**对非数值数据使用MIN() *<em>MIN()函数与MAX()函数类似，MySQL允许将它用来返回任意列中的最小值，包括返回文本列中的最小值。在用于文本数据时，如果数据按相应的列排序，则MIN()返回最前面的行。<br>:::<br>:::info<br><strong>取别名</strong> 在指定别名以包含某个聚集函数的结果时，不应该使用表中实际的列名。虽然这样做并非不合法，但使用唯一的名字会使你的SQL更易于理解和使用（以及将来容易排除故障）。<br>:::<br>:::info<br><strong>注意</strong> 如果指定列名，则DISTINCT只能用于COUNT()。DISTINCT不能用于COUNT(</em>)，因此不允许使用COUNT（DISTINCT），否则会产生错误。类似地，DISTINCT必须使用列名，不能用于计算或表达式。<br>**将DISTINCT用于MIN()和MAX() **虽然DISTINCT从技术上可用于MIN()和MAX()，但这样做实际上没有价值。一个列中的最小值和最大值不管是否包含不同值都是相同的。<br>:::</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>12.分组函数</title>
    <url>/2019/04/05/%E7%AC%AC20%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>MySQL中分组数据的方法是使用 <strong>GROUP BY</strong> 子句，它可以根据一个或多个列对结果集进行分组。在分组的列上我们可以使用 <strong>COUNT</strong>, <strong>SUM</strong>, <strong>AVG</strong> 等函数进行聚合操作。</p>
<p>如果我们想要对分组后的数据进行筛选，我们可以使用 <strong>HAVING</strong> 子句，它类似于 <strong>WHERE</strong> 子句，但是作用于分组后的数据。</p>
<blockquote>
<p><strong>一般来说，MySQL查询时输入顺序如下：</strong></p>
<ol>
<li>FROM子句：从不同的数据源组装数据，先进行JOIN操作，再进行ON条件过滤。</li>
<li>WHERE子句：根据指定的条件对记录行进行筛选。</li>
<li>GROUP BY子句：将数据划分为多个分组。</li>
<li>聚合函数：对分组或整个结果集进行计算，如SUM、COUNT、AVG等。</li>
<li>HAVING子句：对分组进行筛选。</li>
<li>SELECT子句：选择要返回的字段或表达式，可以使用别名或AS关键字重命名。</li>
<li>DISTINCT关键字：去除重复的记录行。</li>
<li>ORDER BY子句：对结果集进行排序，可以使用ASC或DESC关键字指定升序或降序，默认为升序。</li>
<li>LIMIT子句：限制返回的记录行数。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试基础知识</title>
    <url>/2019/03/17/%E7%AC%AC4%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在进行单元测试时，需要了解以下知识：</p>
<ol>
<li>单元测试框架：单元测试框架是一种工具，可以帮助开发人员编写、运行和管理单元测试。常用的单元测试框架包括JUnit、NUnit、pytest等。</li>
<li>测试用例设计：测试用例是单元测试的基本单位，需要设计测试用例来测试代码的各种情况。测试用例应该覆盖所有可能出现的情况，包括正常情况和异常情况。</li>
<li>测试数据设计：测试数据是单元测试的重要组成部分，需要设计测试数据来测试代码的各种情况。测试数据应该包括正常情况下的数据和异常情况下的数据。</li>
<li>断言语句：断言语句用于判断测试结果是否符合预期。常用的断言语句包括assertEquals、assertNotEquals、assertTrue、assertFalse等。</li>
<li>测试覆盖率：测试覆盖率是衡量测试用例覆盖代码的程度的指标。测试覆盖率可以帮助开发人员评估测试用例的质量和完整性。</li>
<li>测试驱动开发（TDD）：TDD是一种开发方法论，它要求在编写代码之前先编写测试用例。TDD可以帮助开发人员更快地开发出高质量的代码。</li>
<li>代码质量管理：单元测试可以帮助提高代码质量，但单元测试本身也需要管理。需要制定测试计划和测试策略，以确保单元测试的质量和完整性。<br>总之，在进行单元测试时，需要了解单元测试框架、测试用例设计、测试数据设计、断言语句、测试覆盖率、测试驱动开发和代码质量管理等知识。只有充分了解这些知识，才能编写高质量、完整的单元测试，提高代码质量和可维护性。</li>
</ol>
]]></content>
      <categories>
        <category>软件测试阶段</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>集成测试基础知识</title>
    <url>/2019/03/17/%E7%AC%AC5%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>集成测试是在软件开发过程中的一种测试，旨在测试系统的不同组件之间的交互和整合是否正常。集成测试通常是在单元测试和系统测试之间进行的，它可以确保不同组件之间的交互和整合是正确的，同时也可以识别和解决不同组件之间的兼容性问题。<br>在集成测试过程中，测试人员需要测试整个系统或其中的一部分，以确保它们可以正确地协同工作。集成测试可以分为以下几个步骤：</p>
<ol>
<li>定义集成测试的目标和范围：在开始集成测试之前，需要定义集成测试的目标和范围。集成测试的目标是测试不同组件之间的交互和整合是否正常。范围是指需要测试的系统的哪些组件。</li>
<li>设计测试用例：测试人员需要设计测试用例，以覆盖系统的不同功能和场景，并测试系统的不同组件之间的交互和整合。测试用例应该根据系统的整体结构和设计来设计，以确保测试的全面性和有效性。</li>
<li>编写测试脚本：测试人员可以使用自动化测试工具，例如Selenium、TestNG、JUnit等，编写测试脚本，自动化执行集成测试，提高测试效率和准确性。</li>
<li>执行测试：执行测试用例，并记录测试结果。测试人员需要检查测试结果，以确保系统的不同组件之间的交互和整合是否正常。</li>
<li>分析测试结果：测试人员需要分析测试结果，并识别和解决不同组件之间的兼容性问题。如果发现问题，测试人员需要将问题报告给开发人员，并跟踪问题的解决过程。<br>总之，集成测试是确保系统不同组件之间的交互和整合正常的重要测试步骤，测试人员需要设计测试用例、执行测试和分析测试结果，并识别和解决不同组件之间的兼容性问题。同时，使用自动化测试工具可以提高测试效率和准确性。</li>
</ol>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>系统测试基础知识</title>
    <url>/2019/03/18/%E7%AC%AC6%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>系统测试是软件开发生命周期中的一种测试，主要用于测试整个系统是否符合其预期功能和性能要求。系统测试通常是在单元测试、集成测试和验收测试之后进行的。系统测试可以帮助开发人员和测试人员识别和解决系统中的错误和缺陷，以确保系统的可靠性、稳定性和安全性。<br>系统测试主要包括以下几个方面：</p>
<ol>
<li>功能测试：系统测试应该测试系统的各种功能，包括各种输入和输出、交互和响应等，以验证系统是否按照预期工作。</li>
<li>性能测试：系统测试应该测试系统的性能，包括响应时间、并发用户数、吞吐量和负载等，以验证系统的可扩展性和可靠性。</li>
<li>安全测试：系统测试应该测试系统的安全性，包括身份验证、访问控制、数据保护等，以验证系统是否能够保护用户数据和系统资源的安全性。</li>
<li>兼容性测试：系统测试应该测试系统在不同平台和设备上的兼容性，包括不同操作系统、不同浏览器、不同移动设备等，以验证系统在不同环境下的运行情况。<br>在进行系统测试时，测试人员需要编写测试用例，以测试系统的不同功能和性能，并记录测试结果。如果发现错误和缺陷，测试人员需要将问题报告给开发人员，并跟踪问题的解决过程。总之，系统测试是确保系统符合预期功能和性能要求的重要测试步骤，测试人员需要测试各种功能、性能和安全性，并识别和解决错误和缺陷。</li>
</ol>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>验收测试基础知识</title>
    <url>/2019/03/18/%E7%AC%AC7%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>验收测试是软件开发生命周期中的最后一个测试阶段，旨在验证软件是否符合客户的需求和预期的业务场景。验收测试由客户或最终用户执行，旨在确保软件系统满足特定的需求和要求，并且可以满足特定的业务场景和用户需求。<br>验收测试包括以下步骤：</p>
<ol>
<li>需求确认：在进行验收测试之前，客户或最终用户应该确认软件系统的需求和要求是否满足其业务需求。</li>
<li>测试计划：客户或最终用户应该准备测试计划，以确保软件系统可以满足特定的业务场景和用户需求。</li>
<li>测试执行：客户或最终用户应该执行测试计划，以确保软件系统可以满足特定的需求和业务场景。测试人员需要记录测试结果，并在发现问题时向开发团队汇报问题。</li>
<li>问题修复：开发团队需要解决测试中发现的问题，并验证修复是否有效。</li>
<li>重复测试：客户或最终用户需要重新执行测试，以确保问题已被解决，并且软件系统可以满足特定的需求和业务场景。<br>验收测试的目的是确保软件系统可以满足客户或最终用户的需求和要求，验证软件系统是否符合预期的业务场景和用户需求。测试人员需要与客户或最终用户密切合作，以确保软件系统可以满足其业务需求。</li>
</ol>
]]></content>
      <categories>
        <category>软件测试阶段</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>学习MySQL的书籍推荐</title>
    <url>/2019/03/19/%E7%AC%AC8%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>以下是一些学习MySQL的书籍推荐：</p>
<ol>
<li>《MySQL必知必会》（原书名：MySQL Crash Course），作者：Ben Forta，译者：朱少民。</li>
<li>《高性能MySQL》（第三版），作者：Baron Schwartz、Peter Zaitsev、Vadim Tkachenko。</li>
<li>《深入浅出MySQL》（第二版），作者：周立、晏利民、杨冠宝。</li>
<li>《MySQL技术内幕：InnoDB存储引擎》（第二版），作者：姜承尧。</li>
<li>《MySQL性能调优与架构设计》（第二版），作者：郑玉婷、刘红伟、吴凌云。<br>这些书籍涵盖了MySQL的基础知识、进阶知识以及实际应用的案例，适合不同层次的读者学习。如果你没有数据库基础，推荐先从《MySQL必知必会》开始学习，这是一本适合初学者的入门书籍。如果想深入了解MySQL的存储引擎、性能调优等方面，可以选择后面几本书籍进行深入学习。</li>
</ol>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>1.了解SQL</title>
    <url>/2019/03/19/%E7%AC%AC9%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h2><p>**数据库（database） **保存有组织的数据的容器（通常是一个文件或一组文件）。</p>
<blockquote>
<p>数据库软件应该称为DBMS（数据库管理系统）。数据库是通过DBMS创建和操纵的容器。数据库可以是保存再硬件设备上的文件，但也可以不是。你使用的是DBMS，它替你访问数据库。</p>
</blockquote>
<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p><strong>表（table）</strong> 某种特定类型数据的结构化清单。</p>
<blockquote>
<p>数据库的表是用来存储数据的对象，是有结构的数据的集合。每一个数据库都是由若干个数据表组成的。表包含带有列名的列，和记录数据的行。</p>
</blockquote>
<h2 id="列和数据类型"><a href="#列和数据类型" class="headerlink" title="列和数据类型"></a>列和数据类型</h2><p><strong>列（column）</strong> 表中的一个字段。所有表都是由一个或多个列组成的。<br>数据库表中的列是用来表示数据的<strong>属性或特征</strong>，也称为<strong>字段或域</strong>。每个列都有一个名称和一个数据类型。数据类型决定了列可以存储什么样的数据，例如整数、字符串、日期等。</p>
<p><strong>数据类型（datatype）</strong> 所容许的数据的类型。每个表列都有相应的数据类型，它限制（或容许）该列中存储的数据。</p>
<blockquote>
<p>数据库表中的数据类型是用来规定列可以存储什么样的数据，例如整数、字符串、日期等。不同的数据库系统支持不同的数据类型，但一般可以分为以下几种：</p>
<ul>
<li>字符/字符串类型，如 character(n)、varchar(n) 等</li>
<li>二进制类型，如 binary(n)、varbinary(n) 等</li>
<li>数值类型，如 integer(p)、float(p)、decimal(p,s) 等</li>
<li>布尔类型，如 boolean</li>
<li>日期/时间类型，如 date、time、datetime 等</li>
</ul>
</blockquote>
<h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><p><strong>行（row）</strong> 表中的一个记录。</p>
<blockquote>
<p>表中的数据是按行存储的，所保存的每个记录存储在自己的行内。如果将表想象为网格，网格中垂直的列为表列，水平行为表行。</p>
</blockquote>
<h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p><strong>主键（primary key）</strong>一列（或一组列），其值能够唯一区分表中每个行。</p>
<blockquote>
<p>数据库主键是由表中的一个或者多个字段构成，用来唯一标识表中的每一行记录。主键必须包含唯一的值，不能包含 null 值。每个表只能有一个主键。</p>
</blockquote>
<blockquote>
<p>**主键的最好习惯 **除MySQL强制实施的规则外，应该坚持的几个普遍认可的最好习惯为：</p>
<ul>
<li>不更新主键列中的值；</li>
<li>不重用主键列的值；</li>
<li>不在主键列中使用可能会更改的值。</li>
</ul>
</blockquote>
<p>（例如，如果使用一个名字作为主键以标识某个供应商，当该供应商合并和更改其名字时，必须更改这个主键。）</p>
<h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><blockquote>
<p><strong>SQL是一门用于管理关系数据库管理系统（RDBMS）的语言。</strong><br>SQL可以让您访问和处理数据库，包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。<br>SQL在1986年成为ANSI的一项标准，在1987年成为ISO标准。</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>软件开发生命周期</title>
    <url>/2019/03/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>软件开发的生命周期是指软件开发过程中的各个阶段，通常包括以下几个主要阶段：</p>
<ol>
<li>需求分析阶段：这个阶段是软件开发的起点，目的是确定软件的需求，包括功能需求和非功能需求。</li>
<li>设计阶段：在这个阶段中，开发团队根据需求分析阶段的结果，进行软件设计，包括概要设计和详细设计两个层次。</li>
<li>编码阶段：在这个阶段中，开发人员根据设计文档进行编码，实现软件的功能。</li>
<li>测试阶段：在编码完成后，需要进行软件测试，包括单元测试、集成测试、系统测试和验收测试等。</li>
<li>部署阶段：在测试完成后，软件需要部署到目标环境中，并进行系统集成和部署测试，确保软件能够在目标环境中正常运行。</li>
<li>运维阶段：软件交付后需要进行维护和升级，包括修复问题、提供技术支持、升级软件版本等。</li>
</ol>
<p>这些阶段可以按照不同的模型进行组合，例如瀑布模型、迭代模型、敏捷模型等。其中，瀑布模型是较为传统的软件开发模型，是一种线性的开发模型，依次进行每个阶段的工作，每个阶段之间有明确的交付成果，这种模型适合需求较为明确的软件项目；迭代模型是将整个开发过程划分为多个迭代周期，在每个迭代周期中完成需求分析、设计、编码、测试等工作，每个迭代周期都可以交付可运行的软件版本，适合需求不太明确或需求频繁变化的软件项目；敏捷模型则更加强调快速响应需求变化和持续交付，强调小批量、快速迭代开发，具有高度的灵活性和适应性，适合需求变化频繁和要求交付周期短的软件项目。</p>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计阶段需要了解的知识</title>
    <url>/2019/03/17/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在软件设计阶段，需要了解以下知识：</p>
<ol>
<li>软件需求分析：软件设计应该基于对需求的全面理解和深入分析。软件需求分析是确定软件系统功能、性能、接口、数据等要求的过程。</li>
<li>软件体系结构设计：软件体系结构设计是确定软件系统组成部分、它们之间的关系以及如何满足需求的过程。软件体系结构应该是可扩展的、可维护的、可重用的。</li>
<li>设计模式：设计模式是解决软件设计问题的经验性解决方案。它们是针对常见问题的经过实践验证的解决方案，可以帮助开发人员更高效地开发和维护软件系统。</li>
<li>编程语言和工具：选择合适的编程语言和工具是软件设计的重要决策。不同的编程语言和工具适用于不同类型的问题和需求。</li>
<li>数据库设计：数据库是软件系统的关键组成部分，因此在软件设计阶段需要进行数据库设计。数据库设计需要考虑数据结构、数据类型、数据安全等方面的问题。</li>
<li>用户体验设计：软件设计不仅仅是为了实现功能，还要提供良好的用户体验。因此，软件设计阶段需要进行用户体验设计，包括界面设计、交互设计、可用性测试等。</li>
<li>软件测试：软件设计阶段需要制定测试计划和测试策略，以确保软件系统的正确性、健壮性和性能。<br>总之，在软件设计阶段，需要对软件系统的要求、体系结构、设计模式、编程语言和工具、数据库设计、用户体验设计和软件测试等方面进行全面了解，以制定高质量、可维护和可扩展的软件系统。</li>
</ol>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>需求分析阶段需要了解的知识</title>
    <url>/2019/03/17/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>需求分析是软件开发的第一步，是确保软件开发成功的关键之一。在需求分析阶段，需要对软件的需求进行充分的了解和收集，包括功能需求、性能需求、安全需求、用户需求等等，同时还需要考虑到需求的可行性、可靠性、可维护性等方面。<br>以下是需求分析中需要了解的知识：</p>
<ol>
<li>软件开发的基础知识：了解软件开发的基本概念、软件开发流程、软件工程的基本原则和方法等。</li>
<li>领域知识：了解软件开发的相关领域，例如银行、保险、医疗等领域的相关业务流程和规则等，以便更好地理解和收集需求。</li>
<li>用户需求：了解用户的需求、期望和使用场景等，通过用户调研、用户访谈等方式进行收集和分析。</li>
<li>功能需求：明确软件需要完成的功能，对每个功能进行详细的描述和分析。</li>
<li>非功能需求：了解软件的性能需求（例如响应时间、并发数、可扩展性等）、安全需求（例如用户权限、数据安全等）和可用性需求（例如易用性、用户体验等）等。</li>
<li>可行性分析：对需求的可行性进行评估，包括技术可行性、资源可行性、市场可行性等方面。</li>
<li>需求规范化：对需求进行规范化和文档化，例如使用用例图、活动图、流程图、状态转换图等方式对需求进行描述和分析。</li>
<li>需求变更管理：了解需求变更的原因和影响，并采取相应的措施进行管理和跟踪。<br>综上所述，需求分析是软件开发中至关重要的一步，需要开发人员具备广泛的软件开发知识和相关领域知识，同时还需要注重需求的收集、规范化、分析和变更管理等方面。</li>
</ol>
]]></content>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
</search>
